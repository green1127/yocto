From 83d2ec1f90050cd88dc7bf5c9f248770f30337df Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Sat, 27 Feb 2021 07:39:59 +0100
Subject: [PATCH] atf: Support for ls2084abbmini

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>
---
 plat/nxp/soc-ls2088/ls2084abbmini/ddr_init.c  | 128 ++++++++++++
 plat/nxp/soc-ls2088/ls2084abbmini/platform.mk |  23 +++
 .../soc-ls2088/ls2084abbmini/platform_def.h   | 190 ++++++++++++++++++
 plat/nxp/soc-ls2088/ls2084abbmini/policy.h    |  32 +++
 4 files changed, 373 insertions(+)
 create mode 100644 plat/nxp/soc-ls2088/ls2084abbmini/ddr_init.c
 create mode 100644 plat/nxp/soc-ls2088/ls2084abbmini/platform.mk
 create mode 100644 plat/nxp/soc-ls2088/ls2084abbmini/platform_def.h
 create mode 100644 plat/nxp/soc-ls2088/ls2084abbmini/policy.h

diff --git a/plat/nxp/soc-ls2088/ls2084abbmini/ddr_init.c b/plat/nxp/soc-ls2088/ls2084abbmini/ddr_init.c
new file mode 100644
index 000000000..dc16477bf
--- /dev/null
+++ b/plat/nxp/soc-ls2088/ls2084abbmini/ddr_init.c
@@ -0,0 +1,128 @@
+/*
+ * Copyright 2018-2019 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Author York Sun <york.sun@nxp.com>
+ */
+
+#include <platform_def.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <debug.h>
+#include <errno.h>
+#include <string.h>
+#include <io.h>
+#include <ddr.h>
+#include <utils.h>
+#include <utils_def.h>
+#include <errata.h>
+
+static const struct rc_timing rcb_1[] = {
+	{1600, 10, 9},
+	{1867, 12, 0xB},
+	{2134, 12, 0xB},
+	{}
+};
+
+static const struct rc_timing rce_1[] = {
+	{1600, 10, 9},
+	{1867, 12, 0xA},
+	{2134, 12, 0xB},
+	{}
+};
+
+static const struct board_timing udimm1[] = {
+	{0x01, rcb_1, 0x01020306, 0x07090A00},
+	{0x04, rce_1, 0x01020407, 0x090A0B05},
+};
+
+static const struct rc_timing rcb[] = {
+	{1600, 8, 0x0F},
+	{1867, 8, 0x10},
+	{2134, 8, 0x13},
+	{}
+};
+
+static const struct board_timing rdimm[] = {
+	{0x01, rcb, 0xFEFCFAFA, 0xFAFCFEF9},
+	{0x04, rcb, 0xFEFCFAFA, 0xFAFCFEF9},
+};
+
+int ddr_board_options(struct ddr_info *priv)
+{
+	struct memctl_opt *popts = &priv->opt;
+	const struct ddr_conf *conf = &priv->conf;
+	const unsigned long ddr_freq = priv->clk / 1000000;
+	int ret;
+
+	if (popts->rdimm) {
+		ret = cal_board_params(priv, rdimm,
+				       ARRAY_SIZE(rdimm));
+	} else {
+		ret = cal_board_params(priv, udimm1,
+				       ARRAY_SIZE(udimm1));
+	}
+	if (ret)
+		return ret;
+
+	popts->cpo_sample = 0x78;
+
+	popts->wrlvl_override = 1;
+	popts->wrlvl_sample = 0x0;	/* 32 clocks */
+
+	if (ddr_freq < 2350) {
+		if (conf->cs_in_use == 0xf) {
+			popts->ddr_cdr1 = DDR_CDR1_DHC_EN |
+					  DDR_CDR1_ODT(DDR_CDR_ODT_80ohm);
+			popts->ddr_cdr2 = DDR_CDR2_ODT(DDR_CDR_ODT_80ohm);
+			popts->twot_en = 1;	/* enable 2T timing */
+		} else {
+			popts->ddr_cdr1 = DDR_CDR1_DHC_EN |
+					  DDR_CDR1_ODT(DDR_CDR_ODT_60ohm);
+			popts->ddr_cdr2 = DDR_CDR2_ODT(DDR_CDR_ODT_60ohm) |
+					  DDR_CDR2_VREF_RANGE_2;
+		}
+	} else {
+		popts->ddr_cdr1 = DDR_CDR1_DHC_EN |
+				  DDR_CDR1_ODT(DDR_CDR_ODT_100ohm);
+		popts->ddr_cdr2 = DDR_CDR2_ODT(DDR_CDR_ODT_100ohm) |
+				  DDR_CDR2_VREF_RANGE_2;
+	}
+
+	return 0;
+}
+
+long long _init_ddr(void)
+{
+	int spd_addr[] = { NXP_SPD_EEPROM0, NXP_SPD_EEPROM1 };
+	struct ddr_info info;
+	struct sysinfo sys;
+	long long dram_size;
+
+	zeromem(&sys, sizeof(sys));
+	get_clocks(&sys);
+	debug("platform clock %lu\n", sys.freq_platform);
+	debug("DDR PLL1 %lu\n", sys.freq_ddr_pll0);
+	debug("DDR PLL2 %lu\n", sys.freq_ddr_pll1);
+
+	zeromem(&info, sizeof(info));
+	/* Set two DDRC here. Unused DDRC will be removed automatically. */
+	info.num_ctlrs = NUM_OF_DDRC;
+	info.dimm_on_ctlr = DDRC_NUM_DIMM;
+	info.spd_addr = spd_addr;
+	info.ddr[0] = (void *)NXP_DDR_ADDR;
+	info.ddr[1] = (void *)NXP_DDR2_ADDR;
+	info.clk = get_ddr_freq(&sys, 0);
+	if (!info.clk)
+		info.clk = get_ddr_freq(&sys, 1);
+
+	dram_size = dram_init(&info);
+
+	if (dram_size < 0)
+		ERROR("DDR init failed.\n");
+
+	return dram_size;
+}
diff --git a/plat/nxp/soc-ls2088/ls2084abbmini/platform.mk b/plat/nxp/soc-ls2088/ls2084abbmini/platform.mk
new file mode 100644
index 000000000..5648b0ac1
--- /dev/null
+++ b/plat/nxp/soc-ls2088/ls2084abbmini/platform.mk
@@ -0,0 +1,23 @@
+#
+# Copyright 2018 NXP
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+# Author Ruchika Gupta <ruchika.gupta@nxp.com>
+#	Pankaj Gupta <pankaj.gupta@nxp.com>
+
+# board-specific build parameters
+BOOT_MODE	:= 	nor
+BOARD		:=	abbmini
+
+# get SoC common build parameters
+include plat/nxp/soc-ls2088/soc.mk
+
+# This is a bit awkward. The board does not use the full ls2088,
+# but the ls2084a family member. Either we could have changed the
+# board name here (leading to confusion possibly) or we can override
+# the board path to end up the correct way. We did that.
+BOARD_PATH	:=	${PLAT_SOC_PATH}/ls2084${BOARD}
+
+BL2_SOURCES	+=	${BOARD_PATH}/ddr_init.c
+
diff --git a/plat/nxp/soc-ls2088/ls2084abbmini/platform_def.h b/plat/nxp/soc-ls2088/ls2084abbmini/platform_def.h
new file mode 100644
index 000000000..d77995816
--- /dev/null
+++ b/plat/nxp/soc-ls2088/ls2084abbmini/platform_def.h
@@ -0,0 +1,190 @@
+/*
+ * Copyright 2018 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Authors: Ruchika Gupta <ruchika.gupta@nxp.com>
+ *	    Pankaj Gupta <pankaj.gupta@nxp.com>
+ */
+
+#ifndef __PLATFORM_DEF_H__
+#define __PLATFORM_DEF_H__
+
+#include <arch.h>
+/* Certain ARM files require defines from this file */
+#include <tbbr_img_def.h>
+/* From ARM :-> Has some common defines ARM requires */
+#include <common_def.h>
+/* Soc specific defines */
+#include <soc.h>
+/* include the platform-level security policy */
+#include <policy.h>
+
+#if defined(IMAGE_BL2)
+#define SEC_MEM_NON_COHERENT
+#endif
+/* Special value used to verify platform parameters from BL2 to BL31 */
+
+/* TBD -- Check and get back if this value is same for all platforms */
+#define LS_BL31_PLAT_PARAM_VAL		0x0f1e2d3c4b5a6978ULL
+
+/******************************************************************************
+ *  Board specific defines
+ *****************************************************************************/
+
+#define NXP_SYSCLK_FREQ		100000000
+#define NXP_DDRCLK_FREQ		133333333
+
+/* UART related definition */
+#define NXP_CONSOLE_ADDR	NXP_UART1_ADDR
+#define NXP_CONSOLE_BAUDRATE	115200
+
+#define NXP_SPD_EEPROM0		0x51
+#define NXP_SPD_EEPROM1		0x53
+
+#define DDRC_NUM_DIMM		1
+#define CONFIG_DDR_ECC_EN
+
+#define PLAT_DEF_DRAM0_SIZE	0x80000000	/*  2G */
+
+/* Board specific - size of QSPI Flash on board */
+#if QSPI_BOOT
+#define NXP_QSPI_FLASH_SIZE	0x20000000
+#endif
+
+#if NOR_BOOT
+#define NXP_NOR_FLASH_SIZE	0x20000000
+#endif
+
+/******************************************************************************
+ * Required platform porting definitions common to all ARM standard platforms
+ *****************************************************************************/
+
+/* Size of cacheable stacks */
+#if defined(IMAGE_BL2)
+#if defined(TRUSTED_BOARD_BOOT)
+#define PLATFORM_STACK_SIZE	0x2000
+#else
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+#elif defined(IMAGE_BL31)
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+
+#define FIRMWARE_WELCOME_STR_LS_BL2	"Welcome to BlueBox Mini BL2 Phase\n"
+#define FIRMWARE_WELCOME_STR_LS_BL31	"Welcome to BlueBox Mini BL31 Phase\n"
+
+/* This is common for all platforms where
+ * 64K is reserved for Secure memory
+ */
+/* 64M Secure Memory */
+#define NXP_SECURE_DRAM_SIZE	(64 * 1024 * 1024)
+
+/* 2M Secure EL1 Payload Shared Memory */
+#define NXP_SP_SHRD_DRAM_SIZE	(2 * 1024 * 1024)
+
+/* Non secure memory */
+#define NXP_NS_DRAM_SIZE	(NXP_DRAM0_SIZE - \
+				(NXP_SECURE_DRAM_SIZE + NXP_SP_SHRD_DRAM_SIZE))
+
+#define NXP_NS_DRAM_ADDR	NXP_DRAM0_ADDR
+
+#ifdef TEST_BL31
+#define NXP_SECURE_DRAM_ADDR 0
+#else
+#define NXP_SECURE_DRAM_ADDR	(NXP_NS_DRAM_ADDR + NXP_DRAM0_SIZE - \
+				(NXP_SECURE_DRAM_SIZE  + NXP_SP_SHRD_DRAM_SIZE))
+#endif
+
+#define NXP_SP_SHRD_DRAM_ADDR	(NXP_NS_DRAM_ADDR + NXP_DRAM0_SIZE \
+				- NXP_SP_SHRD_DRAM_SIZE)
+
+#define BL2_START		NXP_OCRAM_ADDR
+#define BL2_BASE		(BL2_START + NXP_ROM_RSVD)
+#ifdef SD_BOOT
+#define BL2_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE - NXP_SD_BLOCK_BUF_SIZE)
+#else
+#define BL2_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE)
+#endif
+#if (CSF_HDR_SZ > NXP_SD_BLOCK_BUF_SIZE)
+#define BL2_TEXT_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE - CSF_HDR_SZ)
+#else
+#define BL2_TEXT_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE - NXP_SD_BLOCK_BUF_SIZE)
+#endif
+
+/* 2 MB reserved in secure memory for DDR */
+#define BL31_BASE		NXP_SECURE_DRAM_ADDR
+#define BL31_SIZE		(0x200000)
+#define BL31_LIMIT		(BL31_BASE + BL31_SIZE)
+
+/* Put BL32 in secure memory */
+#define BL32_BASE		(NXP_SECURE_DRAM_ADDR + BL31_SIZE)
+#define BL32_LIMIT		(NXP_SECURE_DRAM_ADDR + \
+				NXP_SECURE_DRAM_SIZE + NXP_SP_SHRD_DRAM_SIZE)
+
+/* BL33 memory region */
+/* Hardcoded based on current address in u-boot */
+#define BL33_BASE		0x82000000
+#define BL33_LIMIT		(NXP_NS_DRAM_ADDR + NXP_NS_DRAM_SIZE)
+
+/* SD block buffer */
+#define NXP_SD_BLOCK_BUF_SIZE	(0x3000)
+#define NXP_SD_BLOCK_BUF_ADDR	(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE - NXP_SD_BLOCK_BUF_SIZE)
+
+
+/* IO defines as needed by IO driver framework */
+/* TBD Add how to reach these numbers */
+#define MAX_IO_DEVICES		4
+#define MAX_IO_BLOCK_DEVICES	1
+#define MAX_IO_HANDLES		4
+
+/*
+ * FIP image defines - Offset at which FIP Image would be present
+ * Image would include Bl31 , Bl33 and Bl32 (optional)
+ */
+#ifdef POLICY_FUSE_PROVISION
+#define MAX_FIP_DEVICES		2
+#define FUSE_BUF		ULL(0x81000000)
+#define FUSE_SZ			0x80000
+#endif
+
+#define PLAT_FIP_OFFSET		0x100000
+#define PLAT_FIP_MAX_SIZE	0x400000
+
+/* Check if this size can be determined from array size */
+#if defined(IMAGE_BL2)
+#define MAX_MMAP_REGIONS	8
+#define MAX_XLAT_TABLES		6
+#elif defined(IMAGE_BL31)
+#define MAX_MMAP_REGIONS	9
+#define MAX_XLAT_TABLES		9
+#elif defined(IMAGE_BL32)
+#define MAX_MMAP_REGIONS	8
+#define MAX_XLAT_TABLES		9
+#endif
+
+/******************************************************************************/
+/*
+ * ID of the secure physical generic timer interrupt used by the BL32.
+ */
+#define BL32_IRQ_SEC_PHY_TIMER	29
+
+#define BL31_WDOG_SEC		89
+/*
+ * Define properties of Group 1 Secure and Group 0 interrupts as per GICv3
+ * terminology. On a GICv2 system or mode, the lists will be merged and treated
+ * as Group 0 interrupts.
+ */
+#define PLAT_LS_G1S_IRQ_PROPS(grp) \
+	INTR_PROP_DESC(BL32_IRQ_SEC_PHY_TIMER, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE)
+
+/* SGI 15 and Secure watchdog interrupts assigned to Group 0 */
+#define PLAT_LS_G0_IRQ_PROPS(grp)	\
+	INTR_PROP_DESC(BL31_WDOG_SEC, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(15, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_LEVEL)
+
+
+#endif 
diff --git a/plat/nxp/soc-ls2088/ls2084abbmini/policy.h b/plat/nxp/soc-ls2088/ls2084abbmini/policy.h
new file mode 100644
index 000000000..65e95c7c0
--- /dev/null
+++ b/plat/nxp/soc-ls2088/ls2084abbmini/policy.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2018 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Author Ruchika Gupta <ruchika.gupta@nxp.com>
+ * 	Pankaj Gupta <pankaj.gupta@nxp.com>
+ */
+
+/*---------------------------------------------------------------------------*/
+
+#ifndef _POLICY_H
+#define	_POLICY_H
+
+ // the following defines affect the PLATFORM SECURITY POLICY
+
+ // set this to 0x0 if the platform is not using/responding to ECC errors
+ // set this to 0x1 if ECC is being used (we have to do some init)
+#define  POLICY_USING_ECC 0x0
+
+ // Set this to 0x0 to leave the default SMMU page size in sACR
+ // Set this to 0x1 to change the SMMU page size to 64K
+#define POLICY_SMMU_PAGESZ_64K 0x1
+
+/*
+ * POLICY_PERF_WRIOP = 0 : No Performance enhancement for WRIOP RN-I
+ * POLICY_PERF_WRIOP = 1 : No Performance enhancement for WRIOP RN-I = 20
+ */
+#define POLICY_PERF_WRIOP 0
+//-----------------------------------------------------------------------------
+
+#endif // _POLICY_H
-- 
2.17.1

