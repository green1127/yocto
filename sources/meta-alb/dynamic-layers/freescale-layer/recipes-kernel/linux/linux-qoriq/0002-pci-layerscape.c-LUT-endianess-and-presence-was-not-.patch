From 8ade15646f8b535dace23e2cd50af1501728834e Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Tue, 22 Jan 2019 13:12:04 +0200
Subject: [PATCH] pci-layerscape.c: LUT endianess and presence was not 
 properly handled

Signed-off-by: nxa15299 <Heinz.Wrobel@nxp.com>
Signed-off-by: Ciprian Costea <ciprianmarian.costea@nxp.com>
---
 drivers/pci/host/pci-layerscape.c | 52 +++++++++++++++++++++++++++++++++------
 1 file changed, 44 insertions(+), 8 deletions(-)

diff --git a/drivers/pci/host/pci-layerscape.c b/drivers/pci/host/pci-layerscape.c
index 2d283ea..b2456df 100644
--- a/drivers/pci/host/pci-layerscape.c
+++ b/drivers/pci/host/pci-layerscape.c
@@ -38,13 +38,18 @@
 #define PCIE_MISC_CONTROL_1_OFF        0x8bc /* DBI Read-Only Write Enable Register */
 #define PCIE_DBI_RO_WR_EN              (0x1 << 0) /* DBI Read-Only Write Enable Bit */
 
+/* PEX LUT registers */
+#define PCIE_LUT_UDR(n)		(0x800 + (n) * 8)
+#define PCIE_LUT_LDR(n)		(0x804 + (n) * 8)
+#define PCIE_LUT_ENABLE		(1 << 31)
+
 #define PCIE_IATU_NUM		6
 
 static void ls_pcie_host_init(struct pcie_port *pp);
 
 struct ls_pcie_drvdata {
 	u32 lut_offset;
-	u32 ltssm_shift;
+	u32 lut_bigendian;
 	u32 lut_dbg;
 	struct pcie_host_ops *ops;
 };
@@ -59,6 +64,32 @@ struct ls_pcie {
 
 #define to_ls_pcie(x)	container_of(x, struct ls_pcie, pp)
 
+static void lut_iowrite32(struct ls_pcie *pcie, u32 value, volatile void __iomem *addr)
+{
+	/* Unfortunately, some chips map this differently */
+	if(pcie->drvdata->lut_bigendian) {
+		iowrite32be(value, addr);
+	}
+	else {
+		iowrite32(value, addr);
+	}
+}
+
+static u32 lut_ioread32(struct ls_pcie *pcie, volatile void __iomem *addr)
+{
+	u32 value;
+
+	/* Unfortunately, some chips map this differently */
+	if(pcie->drvdata->lut_bigendian) {
+		value = ioread32be(addr);
+	}
+	else {
+		value = ioread32(addr);
+	}
+
+	return value;
+}
+
 static bool ls_pcie_is_bridge(struct ls_pcie *pcie)
 {
 	u32 header_type;
@@ -147,8 +178,7 @@ static int ls_pcie_link_up(struct pcie_port *pp)
 	struct ls_pcie *pcie = to_ls_pcie(pp);
 	u32 state;
 
-	state = (ioread32(pcie->lut + pcie->drvdata->lut_dbg) >>
-		 pcie->drvdata->ltssm_shift) &
+	state = lut_ioread32(pcie, pcie->lut + pcie->drvdata->lut_dbg) &
 		 LTSSM_STATE_MASK;
 
 	if (state < LTSSM_PCIE_L0)
@@ -218,28 +248,28 @@ static struct ls_pcie_drvdata ls1021_drvdata = {
 
 static struct ls_pcie_drvdata ls1043_drvdata = {
 	.lut_offset = 0x10000,
-	.ltssm_shift = 24,
+	.lut_bigendian = 1,
 	.lut_dbg = 0x7fc,
 	.ops = &ls_pcie_host_ops,
 };
 
 static struct ls_pcie_drvdata ls1046_drvdata = {
 	.lut_offset = 0x80000,
-	.ltssm_shift = 24,
+	.lut_bigendian = 1,
 	.lut_dbg = 0x407fc,
 	.ops = &ls_pcie_host_ops,
 };
 
 static struct ls_pcie_drvdata ls2080_drvdata = {
 	.lut_offset = 0x80000,
-	.ltssm_shift = 0,
+	.lut_bigendian = 0,
 	.lut_dbg = 0x7fc,
 	.ops = &ls_pcie_host_ops,
 };
 
 static struct ls_pcie_drvdata ls2088_drvdata = {
 	.lut_offset = 0x80000,
-	.ltssm_shift = 0,
+	.lut_bigendian = 0,
 	.lut_dbg = 0x407fc,
 	.ops = &ls_pcie_host_ops,
 };
@@ -300,7 +330,13 @@ static int __init ls_pcie_probe(struct platform_device *pdev)
 		return PTR_ERR(pcie->pp.dbi_base);
 	}
 
-	pcie->lut = pcie->pp.dbi_base + pcie->drvdata->lut_offset;
+	/* Not all SoCs have the LUT */
+	if (pcie->drvdata->lut_offset) {
+		pcie->lut = pcie->pp.dbi_base + pcie->drvdata->lut_offset;
+
+		/* Disable LDR zero */
+		lut_iowrite32(pcie, 0, pcie->lut + PCIE_LUT_LDR(0));
+	}
 
 	if (!ls_pcie_is_bridge(pcie))
 		return -ENODEV;
-- 
2.7.4

