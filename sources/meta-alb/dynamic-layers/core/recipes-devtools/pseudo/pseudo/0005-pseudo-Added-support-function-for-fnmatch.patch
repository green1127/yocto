From 4d0711070f1bf9145da359eb65dfa3a85c5e59f2 Mon Sep 17 00:00:00 2001
From: r39252 <Heinz.Wrobel@freescale.com>
Date: Thu, 19 Oct 2017 07:10:35 +0200
Subject: [PATCH 05/15] pseudo: Added support function for fnmatch.

This function will be needed in subsequent commits to enable changes
to execution path checks
---
 pseudo_client.c | 49 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 49 insertions(+)

diff --git a/pseudo_client.c b/pseudo_client.c
index 4eb91df..674d61c 100644
--- a/pseudo_client.c
+++ b/pseudo_client.c
@@ -36,6 +36,7 @@
 #include <fcntl.h>
 #include <pwd.h>
 #include <grp.h>
+#include <fnmatch.h>
 
 #ifdef PSEUDO_XATTRDB
 #include <sys/xattr.h>
@@ -1349,6 +1350,54 @@ pseudo_client_shutdown(void) {
 	return 0;
 }
 
+/* This function matches a PATH like exception list to the paths we use.
+ * NOTE: It has a length limit on any individual pattern!
+ */
+static char *patternlistmatchespath(const char *patternlist, const char *path, char *resbuf, size_t resbuflen, int checkalias)
+{
+	char *foundpath = NULL, *res;
+
+	/* For backwards compatibility, no patternlist means that
+	 * anything matches. THis is different from an empty list!
+	 */
+	if (patternlist && path) {
+		char patternbuf[NAME_MAX];
+		const char *s = patternlist;
+		size_t i,j;
+
+		if (!resbuf) {
+			resbuf = &patternbuf[0];
+			resbuflen = sizeof(patternbuf);
+		}
+
+		while (*s) {
+			s += strspn(s, ":");
+			i = strcspn(s, ":");
+			if (i && i < resbuflen) {
+				strncpy(resbuf, s, i);
+				resbuf[i] = 0;
+				res = &resbuf[0];
+				if(checkalias) {
+					j = strcspn(resbuf, "=");
+					if (j) {
+						resbuf[j++] = '\0';
+						res = &resbuf[j];
+					}
+					else
+						res = NULL;
+				}
+				if(fnmatch(resbuf, path, 0) == 0) {
+					foundpath = res;
+					break;
+				}
+			}
+			s += i;
+		}
+	}
+
+	return foundpath;
+}
+
 static char *
 base_path(int dirfd, const char *path, int leave_last) {
 	char *basepath = 0;
-- 
1.8.3.1

